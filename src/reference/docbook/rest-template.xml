<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="rest-template" xmlns:xlink="http://www.w3.org/1999/xlink">
 <title>Spring for Android RestTemplate Module</title>

  <section id="rest-template-introduction">
	
	<title>Introduction</title>
	
	<para>Spring's RestTemplate is a robust, popular Java-based REST client. The Spring for Android RestTemplate Module provides a version of RestTemplate that works in an Android environment.</para>
	
  </section>

  <section id="rest-template-overview">
	
	<title>Overview</title>	
	
	<para>The <classname>RestTemplate</classname> class is the heart of the Spring for Android RestTemplate library. It is conceptually similar to other template classes found in other Spring portfolio projects. RestTemplate's behavior is customized by providing callback methods and configuring the <interfacename>HttpMessageConverter</interfacename> used to marshal objects into the HTTP request body and to unmarshal any response back into an object. When you create a new <classname>RestTemplate</classname> instance, the constructor sets up several supporting objects that make up the RestTemplate functionality.</para>
			
	<para>Here is an overview of the functionality supported within <classname>RestTemplate</classname>.</para>
	
	<section>
		
		<title>HTTP Client</title>
		
		<para><classname>RestTemplate</classname> provides an abstraction for making RESTful HTTP requests, and internally, <classname>RestTemplate</classname> utilizes a native Android HTTP client library for those requests. There are two native HTTP clients available on Android, the standard J2SE facilities, and the <link xlink:href="http://hc.apache.org/httpcomponents-client-ga/index.html">HttpComponents HttpClient</link>. The standard JS2SE facilities are made available through the <classname>SimpleClientHttpRequestFactory</classname>, while the HttpClient is made available through the <classname>HttpComponentsClientHttpRequestFactory</classname>. The default <interfacename>ClientHttpRequestFactory</interfacename> used when you create a new <classname>RestTemplate</classname> instance differs based on the version of Android on which your application is running.</para>

		<para>Google recommends to use the J2SE facilities on <link xlink:href="http://android-developers.blogspot.com/2011/09/androids-http-clients.html">Gingerbread (Version 2.3)</link> and newer, while previous versions should use the HttpComponents HttpClient. Based on this recommendation <classname>RestTemplate</classname> checks the version of Android on which your app is running and uses the appropriate <interfacename>ClientHttpRequestFactory</interfacename>. To utilize a specific <interfacename>ClientHttpRequestFactory</interfacename> you must either pass a new instance into the <classname>RestTemplate</classname> constructor, or call <methodname>setRequestFactory(ClientHttpRequestFactory requestFactory)</methodname> on an existing <classname>RestTemplate</classname> instance.</para>
		
	</section>
	
	<section>
		
		<title>Gzip Compression</title>
		
		<para><classname>RestTemplate</classname> supports sending and receiving data encoded with gzip compression. The HTTP specification allows for additional values in the <literal>Accept-Encoding</literal> header field, however <classname>RestTemplate</classname> only supports gzip compression at this time.</para>
		
	</section>
	
	<section>
		
		<title>Object to JSON Marshaling</title>
		
		<para>Object to JSON marshaling in Spring for Android RestTemplate requires the use of a third party JSON mapping library. There are two libraries supported in Spring for Android, <link xlink:href="http://jackson.codehaus.org">Jackson JSON Processor</link>, and <link xlink:href="http://code.google.com/p/google-gson/">Google Gson</link>. While Jackson is a well known JSON parsing library, the Gson library is smaller, which would result in an smaller Android app when packaged.</para>
		
	</section>
	
	<section>
		
		<title>Object to XML Marshaling</title>
		
		<para>Object to XML marshaling in Spring for Android RestTemplate requires the use of a third party XML mapping library. The <link xlink:href="http://simple.sourceforge.net">Simple XML serializer</link> is used to provide this marshaling functionality.</para>
		
	</section>
	
	<section>
		
		<title>RSS and Atom Support</title>
		
		<para>RSS and Atom feed support in Spring for Android RestTemplate requires the use of a third party feed reader library. The <link xlink:href="http://code.google.com/p/android-rome-feed-reader">Android ROME Feed Reader</link> is used to provide this functionality.</para>
		
	</section>
	
  </section>


  <section id="rest-template-methods">
		
	<title>RestTemplate Methods</title>
	
	<para><classname>RestTemplate</classname> provides higher level methods that correspond to each of the six main HTTP methods.  These methods make it easy to invoke many RESTful services and enforce REST best practices.</para>
	
	<para>The names of <classname>RestTemplate</classname> methods follow a naming convention, the first part indicates what HTTP method is being invoked and the second part indicates what is returned. For example, the method <methodname>getForObject()</methodname> will perform a GET, convert the HTTP response into an object type of your choice and return that object. The method <methodname>postForLocation()</methodname> will do a POST, converting the given object into a HTTP request and return the response HTTP Location header where the newly created object can be found. In case of an exception processing the HTTP request, an exception of the type <classname>RestClientException</classname> will be thrown.  This behavior can be changed by plugging in another <interfacename>ResponseErrorHandler</interfacename> implementation into the <classname>RestTemplate.</classname></para>
	
	<para>For more information on <classname>RestTemplate</classname> and it's associated methods, please refer to the <link xlink:href="http://static.springsource.org/spring-android/docs/1.0.x/api/org/springframework/web/client/RestTemplate.html">API Javadoc</link></para>
	
	<section>
		
		<title>HTTP DELETE</title>
		
		<programlisting language="java"><![CDATA[
public void delete(String url, Object... urlVariables) throws RestClientException;

public void delete(String url, Map<String, ?> urlVariables) throws RestClientException;

public void delete(URI url) throws RestClientException;]]>
		</programlisting>

	</section>

	<section>
		
		<title>HTTP GET</title>

		<programlisting language="java"><![CDATA[
public <T> T getForObject(String url, Class<T> responseType, Object... urlVariables) throws RestClientException;

public <T> T getForObject(String url, Class<T> responseType, Map<String, ?> urlVariables) throws RestClientException;

public <T> T getForObject(URI url, Class<T> responseType) throws RestClientException;

public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Object... urlVariables);

public <T> ResponseEntity<T> getForEntity(String url, Class<T> responseType, Map<String, ?> urlVariables);

public <T> ResponseEntity<T> getForEntity(URI url, Class<T> responseType) throws RestClientException;]]>
		</programlisting>
		
	</section>

	<section>

		<title>HTTP HEAD</title>

		<programlisting language="java"><![CDATA[
public HttpHeaders headForHeaders(String url, Object... urlVariables) throws RestClientException;

public HttpHeaders headForHeaders(String url, Map<String, ?> urlVariables) throws RestClientException;

public HttpHeaders headForHeaders(URI url) throws RestClientException;]]>
		</programlisting>

	</section>
	
	<section>

		<title>HTTP OPTIONS</title>

		<programlisting language="java"><![CDATA[
public Set<HttpMethod> optionsForAllow(String url, Object... urlVariables) throws RestClientException;

public Set<HttpMethod> optionsForAllow(String url, Map<String, ?> urlVariables) throws RestClientException;

public Set<HttpMethod> optionsForAllow(URI url) throws RestClientException;]]>
		</programlisting>

	</section>
	
	<section>

		<title>HTTP POST</title>

		<programlisting language="java"><![CDATA[
public URI postForLocation(String url, Object request, Object... urlVariables) throws RestClientException;

public URI postForLocation(String url, Object request, Map<String, ?> urlVariables);

public URI postForLocation(URI url, Object request) throws RestClientException;

public <T> T postForObject(String url, Object request, Class<T> responseType, Object... uriVariables);

public <T> T postForObject(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables);

public <T> T postForObject(URI url, Object request, Class<T> responseType) throws RestClientException;

public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Object... uriVariables);

public <T> ResponseEntity<T> postForEntity(String url, Object request, Class<T> responseType, Map<String, ?> uriVariables) throws RestClientException;

public <T> ResponseEntity<T> postForEntity(URI url, Object request, Class<T> responseType) throws RestClientException;]]>
		</programlisting>

	</section>
	
	<section>

		<title>HTTP PUT</title>

		<programlisting language="java"><![CDATA[
public void put(String url, Object request, Object... urlVariables) throws RestClientException;

public void put(String url, Object request, Map<String, ?> urlVariables) throws RestClientException;

public void put(String url, Object request, Map<String, ?> urlVariables) throws RestClientException;]]>
		</programlisting>

	</section>
	
  </section>


  <section id="rest-template-message-converters">

	<title>HTTP Message Conversion</title>

	<para>Objects passed to and returned from the methods <methodname>getForObject()</methodname>, <methodname>getForEntity()</methodname>, <methodname>postForLocation()</methodname>, <methodname>postForObject()</methodname> and <methodname>put()</methodname> are converted to HTTP requests and from HTTP responses by <interfacename>HttpMessageConverter</interfacename> instances. Converters for the main mime types are registered by default, but you can also write your own converter and register it via the <methodname>messageConverters()</methodname> property.</para> 
	
	
	<para>The default converter instances registered with the template are <classname>ByteArrayHttpMessageConverter</classname>, <classname>StringHttpMessageConverter</classname>, and <classname>ResourceHttpMessageConverter</classname>.  If you are app is running on Android 2.2 or later, then <classname>XmlAwareFormHttpMessageConverter</classname> and <classname>SourceHttpMessageConverter</classname> are registered, as these two message converters require the <classname>javax.xml.transform</classname> library. On Android 2.1, this falls back to the <classname>FormHttpMessageConverter</classname> which lacks some of the XML support in the other two.</para> 
	
	<para>The <interfacename>HttpMessageConverter</interfacename> interface is shown below to give you a better feel for its functionality.</para>

	<programlisting language="java"><![CDATA[
public interface HttpMessageConverter<T> {

    // Indicates whether the given class can be read by this converter.
    boolean canRead(Class<?> clazz, MediaType mediaType);

    // Indicates whether the given class can be written by this converter.
    boolean canWrite(Class<?> clazz, MediaType mediaType);

    // Return the list of {@link MediaType} objects supported by this converter.
    List<MediaType> getSupportedMediaTypes();

    // Read an object of the given type form the given input message, and returns it.
    T read(Class<? extends T> clazz, HttpInputMessage inputMessage)
            throws IOException, HttpMessageNotReadableException;

    // Write an given object to the given output message.
    void write(T t, MediaType contentType, HttpOutputMessage outputMessage)
            throws IOException, HttpMessageNotWritableException;

}]]>
	</programlisting>	

	<para>Concrete implementations for the main media (mime) types are provided in the framework and are registered by default within <classname>RestTemplate</classname></para>

	<para>The following <interfacename>HttpMessageConverter</interfacename> implementations are available in Spring for Android. For all converters a default media type is used but can be overridden by calling the <methodname>setSupportedMediaTypes()</methodname> method.</para>

	<section>

		<title>StringHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write Strings from the HTTP request and response. By default, this converter supports all text media types (<literal>text/*</literal>), and writes with a <literal>Content-Type</literal> of <literal>text/plain</literal>.</para>

	</section>

	<section>

		<title>FormHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write form data from the HTTP request and response. By default, this converter reads and writes the media type <literal>application/x-www-form-urlencoded</literal>. Form data is read from and written into a <literal>MultiValueMap&lt;String, String&gt;</literal>.</para>

	</section>

	<section>

		<title>ByteArrayMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write byte arrays from the HTTP request and response. By default, this converter supports all media types (<literal>*/*</literal>), and writes with a <literal>Content-Type</literal> of <literal>application/octet-stream</literal>. This can be overridden by setting the supportedMediaTypes property, and overriding <methodname>getContentType(byte[])</methodname>.</para>

	</section>

	<section>

		<title>SimpleXmlHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write XML from the HTTP request and response using <link xlink:href="http://simple.sourceforge.net">Simple Framework</link>'s <interfacename>Serializer</interfacename>. XML mapping can be customized as needed through the use of Simple's provided annotations. When additional control is needed, a custom <interfacename>Serializer</interfacename> can be injected through the <interfacename>Serializer</interfacename> property. By default, this converter reads and writes the media types <literal>application/xml</literal>, <literal>text/xml</literal>, and <literal>application/*+xml</literal>.</para>

		<para>It is important to note that this is not a Spring OXM compatible message converter. It is a standalone implementation that enables XML serialization through Spring for Android.</para>

	</section>

	<section>

		<title>MappingJacksonHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write JSON using <link xlink:href="http://jackson.codehaus.org">Jackson JSON Processor</link>'s <classname>ObjectMapper</classname>. JSON mapping can be customized as needed through the use of Jackson's provided annotations. When further control is needed, a custom <classname>ObjectMapper</classname> can be injected through the <classname>ObjectMapper</classname> property for cases where custom JSON serializers/deserializers need to be provided for specific types. By default this converter supports (<literal>application/json</literal>).</para>

	</section>

	<section>

		<title>GsonHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write JSON using <link xlink:href="http://code.google.com/p/google-gson/">Google Gson</link>'s <classname>Gson</classname> class. JSON mapping can be customized as needed through the use of Gson's provided annotations. When further control is needed, a custom <classname>Gson</classname> can be injected through the <classname>Gson</classname> property for cases where custom JSON serializers/deserializers need to be provided for specific types. By default this converter supports (<literal>application/json</literal>).</para>

		<para>Please note that this message converter and the <classname>MappingJacksonHttpMessageConverter</classname> support <literal>application/json</literal>. Because of this, only one will automatically be loaded with a new <classname>RestTemplate</classname> instance. If you include Jackson and Gson in your classpath, Jackson will take precedence over Gson.</para>

	</section>

	<section>

		<title>SourceHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write <classname>javax.xml.transform.Source</classname> from the HTTP request and response. Only <classname>DOMSource</classname>, <classname>SAXSource</classname>, and <classname>StreamSource</classname> are supported. By default, this converter supports (<literal>text/xml</literal>) and (<literal>application/xml</literal>).</para>

	</section>
	
	<section>

		<title>SyndFeedHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write RSS and Atom feeds from the HTTP request and response using <link xlink:href="http://code.google.com/p/android-rome-feed-reader">Android ROME Feed Reader</link>.  The data is read from and written into a <classname>com.google.code.rome.android.repackaged.com.sun.syndication.feed.synd.SyndFeed</classname>.  By default, this converter supports (<literal>application/rss+xml</literal>) and (<literal>application/atom+xml</literal>).</para>

	</section>
	
	<section>

		<title>RssChannelHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write RSS feeds from the HTTP request and response.  The data is read from and written into a <classname>com.google.code.rome.android.repackaged.com.sun.syndication.feed.rss.Channel</classname>.  By default, this converter supports (<literal>application/rss+xml</literal>).</para>
		
		<para>Because the <classname>SyndFeedHttpMessageConverter</classname> provides a higher level of abstraction around RSS and Atom feeds, the <classname>RssChannelHttpMessageConverter</classname> is not automatically added when you create a new <classname>RestTemplate</classname> instance.  If you prefer to use this message converter then you have to manually add it to the <classname>RestTemplate</classname> instance.
		</para>
		
	</section>
	
	<section>

		<title>AtomFeedHttpMessageConverter</title>

		<para>An <interfacename>HttpMessageConverter</interfacename> implementation that can read and write Atom feeds from the HTTP request and response.  The data is read from and written into a <classname>com.google.code.rome.android.repackaged.com.sun.syndication.feed.atom.Feed</classname>.  By default, this converter supports (<literal>application/atom+xml</literal>).</para>
		
		<para>Because the <classname>SyndFeedHttpMessageConverter</classname> provides a higher level of abstraction around RSS and Atom feeds, the <classname>AtomFeedHttpMessageConverter</classname> is not automatically added when you create a new <classname>RestTemplate</classname> instance.  If you prefer to use this message converter then you have to manually add it to the <classname>RestTemplate</classname> instance.
		</para>
		
	</section>

  </section>


  <section id="rest-template-howtoget">
	
	<title>How to get</title>
	
	<para>Add the spring-android-rest-template artifact to your classpath:</para>
		
	<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-rest-template</artifactId>
    <version>${spring-android-version}</version>
</dependency>

<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-core</artifactId>
    <version>${spring-android-version}</version>
</dependency>]]>
	</programlisting>
	
	<para>Google's provided Android toolset does not include dependency management support. However, through the use of third party tools, you can use Maven to manage dependencies and build your Android app. See the <link linkend="spring-android-maven">Spring for Android and Maven</link> section for more information.</para>

	<para>Spring for Android RestTemplate supports several optional libraries.  These optional libraries are used by different <interfacename>HttpMessageConverter</interfacename> instances within <classname>RestTemplate</classname>.  If you would like to make use of these message converters, then you need to include the corresponding libraries in your classpath.</para>	
	
	<section id="rest-template-howtoget-jackson">
		
		<title>Jackson JSON Processor</title>
				
		<para>Include the following <link xlink:href="http://jackson.codehaus.org">Jackson</link> dependencies to your classpath to enable the <classname>MappingJacksonHttpMessageConverter</classname>.</para>
		
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-mapper-asl</artifactId>
    <version>${jackson-version}</version>
</dependency>]]>
		</programlisting>
		
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.codehaus.jackson</groupId>
    <artifactId>jackson-core-asl</artifactId>
    <version>${jackson-version}</version>
</dependency>]]>
		</programlisting>
		
	</section>
	
		<section id="rest-template-howtoget-gson">
			
			<title>Google Gson</title>
			
			<para>Add the following <link xlink:href="http://code.google.com/p/google-gson/">Google Gson</link> dependency to your classpath to enable the <classname>GsonHttpMessageConverter</classname>.</para>
			
			<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>com.google.code.gson</groupId>
    <artifactId>gson</artifactId>
    <version>${gson-version}</version>
</dependency>]]>
			</programlisting>
			
		</section>
	
	<section id="rest-template-howtoget-simple">
		
		<title>Simple XML Serializer</title>
		
		<para>Add the following <link xlink:href="http://simple.sourceforge.net">Simple XML Serializer</link> dependency to your classpath to enable the <classname>SimpleXmlHttpMessageConverter</classname>.</para>
		
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.simpleframework</groupId>
    <artifactId>simple-xml</artifactId>
    <version>${simple-version}</version>
</dependency>]]>
		</programlisting>
		
	</section>
	
	<section id="rest-template-howtoget-rome">
		
		<title>Android ROME Feed Reader</title>
		
		<para>Add the following <link xlink:href="http://code.google.com/p/android-rome-feed-reader">Android ROME Feed Reader</link> dependencies to your classpath to enable the <classname>RssChannelHttpMessageConverter</classname>, <classname>AtomFeedHttpMessageConverter</classname>, and <classname>SyndFeedHttpMessageConverter</classname>. This library depends on a forked version of JDOM to work on Android 2.1 and earlier. The JDOM library addresses a <link xlink:href="http://www.jdom.org/pipermail/jdom-interest/2009-July/016345.html">bug</link> in the Android XML parser.</para>
		
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>com.google.code.android-rome-feed-reader</groupId>
    <artifactId>android-rome-feed-reader</artifactId>
    <version>${android-rome-version}</version>
</dependency>]]>
		</programlisting>
		
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.jdom</groupId>
    <artifactId>jdom</artifactId>
    <version>${jdom-fork-version}</version>
</dependency>]]>
		</programlisting>
		
		<para>The Android ROME Feed Reader is not available through the Maven central repository. When using Maven, you will need to include the following repository in your POM.</para>
		
		<programlisting language="xml"><![CDATA[
<!-- For developing with Android ROME Feed Reader -->
<repository>
    <id>android-rome-feed-reader-repository</id>
    <name>Android ROME Feed Reader Repository</name>
    <url>https://android-rome-feed-reader.googlecode.com/svn/maven2/releases</url>
</repository>]]>
		</programlisting>
		
	</section>
	
  </section>


  <section id="rest-template-examples">
	
  	<title>Usage Examples</title>

  	<para>Using <classname>RestTemplate</classname>, it's easy to invoke RESTful APIs.  Below are several usage examples that illustrate the different methods for making RESTful requests.</para>
	
	<para>All of the following examples are based on a <link xlink:href="https://github.com/SpringSource/spring-android-samples">sample Android application</link>. You can retrieve the source code for the sample app with the following command:</para>
	
	<programlisting>
$ git clone git://github.com/SpringSource/spring-android-samples.git
	</programlisting>	

  	<section>
	
		<title>Basic Usage Example</title>
		
		<para>The following example shows a query to google for the search term "SpringSource".</para>
		
		<programlisting language="java"><![CDATA[
RestTemplate restTemplate = new RestTemplate();
String url = "https://ajax.googleapis.com/ajax/services/search/web?v=1.0&q={query}";
String result = restTemplate.getForObject(url, String.class, "SpringSource");]]>
		</programlisting>
		
	</section>
	
  	<section>

		<title>Using Gzip Compression</title>

		<para>Gzip compression can significantly reduce the size of the response data being returned in a REST request. Gzip must be supported by the web server to which the request is being made. By setting the content coding type of the <literal>Accept-Encoding</literal> header to <literal>gzip</literal>, you are requesting that the server respond using gzip compression. If gzip is available, or enabled on the server, then it should return a compressed response. RestTemplate checks the <literal>Content-Encoding</literal> header in the response to determine if, in fact, the response is gzip compressed. At this time, RestTemplate only supports the gzip content coding type in the <literal>Content-Encoding</literal> header. If the response data is determined to be gzip compressed, then a <link xlink:href="http://developer.android.com/reference/java/util/zip/GZIPInputStream.html">GZIPInputStream</link> is used to decompress it.</para>
		
		<para>The following example shows how to request a gzip compressed response from the server.</para>

		<programlisting language="java"><![CDATA[
HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setAcceptEncoding(ContentCodingType.GZIP);

HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

RestTemplate restTemplate = new RestTemplate();
ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, String.class);]]>
		</programlisting>
		
		<para>One thing to note, is that when using the J2SE facilities with the <classname>SimpleClientHttpRequestFactory</classname>, Gingerbread and newer automatically set the Accept-Encoding header to request gzip responses. This is built in functionality of newer versions of Android. If you desire to disable gzip, then you must set the <literal>identity</literal> value in the header.</para>

		<programlisting language="java"><![CDATA[
HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setAcceptEncoding(ContentCodingType.IDENTITY);

HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

RestTemplate restTemplate = new RestTemplate();
ResponseEntity<String> response = restTemplate.exchange(url, HttpMethod.GET, requestEntity, String.class);]]>
		</programlisting>

	</section>
  
	<section>
		
		<title>Retrieving JSON data via HTTP GET</title>
		
		<para>Suppose you have defined a Java object you wish to populate from a RESTful web request that returns JSON content.</para>
		
		<para>Define your object based on the JSON data being returned from the RESTful request:</para>
		
		<programlisting language="java"><![CDATA[
public class Event {

    private Long id;

    private String title;
	
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }
	
    public String setTitle(String title) {
        this.title = title;
    }
}]]>
		</programlisting>
		
		<para>Make the REST request:</para>
		
		<programlisting language="java"><![CDATA[
String url = "http://mypretendservice.com/events";
RestTemplate restTemplate = new RestTemplate();
Event[] events = restTemplate.getForObject(url, Event[].class);]]>
		</programlisting>
		
		<para>You can also set the <literal>Accept</literal> header for the request:</para>
		
		<programlisting language="java"><![CDATA[
HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setAccept(Collections.singletonList(new MediaType("application","json")));

HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

String url = "http://mypretendservice.com/events";

RestTemplate restTemplate = new RestTemplate();
ResponseEntity<Event[]> responseEntity = restTemplate.exchange(url, HttpMethod.GET, requestEntity, Event[].class);
Event[] events = responseEntity.getBody();]]>
		</programlisting>
		
		<para>Alternatively, you can use the <classname>GsonHttpMessageConverter</classname> for JSON marshaling. The following repeats the same request, utilizing Gson.</para>
		
		<programlisting language="java"><![CDATA[
HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setAccept(Collections.singletonList(new MediaType("application","json")));

HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

String url = "http://mypretendservice.com/events";

GsonHttpMessageConverter messageConverter = new GsonHttpMessageConverter();
List<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();
messageConverters.add(messageConverter);

RestTemplate restTemplate = new RestTemplate();
restTemplate.setMessageConverters(messageConverters);

ResponseEntity<Event[]> responseEntity = restTemplate.exchange(url, HttpMethod.GET, requestEntity, Event[].class);
Event[] events = responseEntity.getBody();]]>
		</programlisting>
		
	</section>
	
	<section>
		
		<title>Retrieving XML data via HTTP GET</title>
		
		<para>Using the same Java object we defined earlier, we can modify the requests to retrieve XML.</para>
		
		<para>Define your object based on the XML data being returned from the RESTful request. Note the annotations used by Simple to marshal the object:</para>
		
		<programlisting language="java"><![CDATA[
@Root
public class Event {

    @Element
    private Long id;

    @Element
    private String title;

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }

    public String setTitle(String title) {
        this.title = title;
    }
}]]>
		</programlisting>
		
		<para>To marshal an array of events from xml, we need to define a wrapper class for the list:</para>
		
		<programlisting language="java"><![CDATA[
@Root(name="events")
public class EventList {

   @ElementList(inline=true)
   private List<Event> events;

   public List<Event> getEvents() {
      return events;
   }

   public void setEvents(List<Event> events) {
       this.events = events;
   }
}]]>
		</programlisting>
		
		<para>Make the REST request:</para>
		
		<programlisting language="java"><![CDATA[
String url = "http://mypretendservice.com/events";
RestTemplate restTemplate = new RestTemplate();
EventList eventList = restTemplate.getForObject(url, EventList.class);]]>
		</programlisting>
		
		<para>You can also specify the <literal>Accept</literal> header for the request:</para>
		
		<programlisting language="java"><![CDATA[
List<MediaType> acceptableMediaTypes = new ArrayList<MediaType>();
acceptableMediaTypes.add(new MediaType("application","xml"));

HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setAccept(acceptableMediaTypes);

HttpEntity<?> requestEntity = new HttpEntity<Object>(requestHeaders);

String url = "http://mypretendservice.com/events";

RestTemplate restTemplate = new RestTemplate();
ResponseEntity<EventList> responseEntity = restTemplate.exchange(url, HttpMethod.GET, requestEntity, EventList.class);
EventList eventList = responseEntity.getBody();]]>
		</programlisting>
		
	</section>
	
	<section>
		
		<title>Send JSON data via HTTP POST</title>
		
		<para>POST a Java object you have defined to a RESTful service that accepts JSON data.</para>
		
		<para>Define your object based on the JSON data expected by the RESTful request:</para>
		
		<programlisting language="java"><![CDATA[
public class Message 
{
    private long id;

    private String subject;

    private String text;

    public void setId(long id) {
        this.id = id;
    }

    public long getId() {
        return id;
    }

    public void setSubject(String subject) {
        this.subject = subject;
    }

    public String getSubject() {
        return subject;
    }

    public void setText(String text) {
        this.text = text;
    }

    public String getText() {
        return text;
    }
}]]>
		</programlisting>
		
		<para>Make the REST request. In this example, the request responds with a string value:</para>
		
		<programlisting language="java"><![CDATA[
Message message = new Message();
message.setId(555);
message.setSubject("test subject");
message.setText("test text");
			
String url = "http://mypretendservice.com/sendmessage";
RestTemplate restTemplate = new RestTemplate();
String response = restTemplate.postForObject(url, message, String.class);]]>
		</programlisting>
		
		<para>You can also specify the <literal>Content-Type</literal> header in your request:</para>
		
		<programlisting language="java"><![CDATA[
Message message = new Message();
message.setId(555);
message.setSubject("test subject");
message.setText("test text");

HttpHeaders requestHeaders = new HttpHeaders();
requestHeaders.setContentType(new MediaType("application","json"));

HttpEntity<Message> requestEntity = new HttpEntity<Message>(message, requestHeaders);

String url = "http://mypretendservice.com/sendmessage";

RestTemplate restTemplate = new RestTemplate();
ResponseEntity<String> responseEntity = restTemplate.exchange(url, HttpMethod.POST, requestEntity, String.class);
String result = responseEntity.getBody();]]>
		</programlisting>
	</section>
	
	<section>
		
		<title>Retrieve RSS or Atom feed</title>
		
		<para>The following is a basic example of loading an RSS feed:</para>
		
		<programlisting language="java"><![CDATA[
String url = "http://mypretendservice.com/rssfeed";
RestTemplate restTemplate = new RestTemplate();
SyndFeed = restTemplate.getForObject(url, SyndFeed.class);]]>
		</programlisting>
		
		<para>It is possible that you need to adjust the Media Type associated with the <classname>SyndFeedHttpMessageConverter</classname>. By default, the converter is associated with <literal>application/rss+xml</literal> and <literal>application/atom+xml</literal>.  An RSS feed might instead have a media type of <literal>text/xml</literal>, for example. The following code illustrates how to set the media type.</para>
		
		<programlisting language="java"><![CDATA[
String url = "http://mypretendservice.com/rssfeed";

SyndFeedHttpMessageConverter converter = new SyndFeedHttpMessageConverter();
List<MediaType> mediaTypes = new ArrayList<MediaType>();
mediaTypes.add(new MediaType("text","xml"));
converter.setSupportedMediaTypes(mediaTypes);

List<HttpMessageConverter<?>> messageConverters = new ArrayList<HttpMessageConverter<?>>();
messageConverters.add(converter);

RestTemplate restTemplate = new RestTemplate();
restTemplate.setMessageConverters(messageConverters);
SyndFeed feed = restTemplate.getForObject(url, SyndFeed.class);]]>
		</programlisting>
		
	</section>
	
  </section>

</chapter>